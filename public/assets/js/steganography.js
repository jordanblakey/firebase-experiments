!function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(n,a,t){r.o(n,a)||Object.defineProperty(n,a,{configurable:!1,enumerable:!0,get:t})},r.n=function(n){var a=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(a,"a",a),a},r.o=function(n,a){return Object.prototype.hasOwnProperty.call(n,a)},r.p="",r(r.s=57)}({57:function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(58);\n\n\n//////////////////\n// WEBPACK FOOTER\n// multi ./src/assets/js/components/steganography.js\n// module id = 57\n// module chunks = 3\n\n//# sourceURL=webpack:///multi_./src/assets/js/components/steganography.js?")},58:function(module,exports,__webpack_require__){"use strict";eval("\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // ALIASES\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  window.qs = function (s) {\n    return document.querySelector(s);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // TEXTAREA FILL STATUS\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  if (qs('.show-password')) {\n    qs('.show-password').addEventListener('click', function () {\n      var elm = qs('#password');\n      elm.type === 'password' ? elm.type = 'text' : elm.type = 'password';\n    });\n  }\n\n  if (qs('.read-button')) {\n    qs('.read-button').addEventListener('click', readIMG);\n  }\n\n  if (qs('.write-button')) {\n    qs('.write-button').addEventListener('click', writeIMG);\n  }\n\n  if (qs('#message').getAttribute('maxlength')) {\n    qs('#message').onkeydown = chkLen;\n    qs('#message').onblur = chkLen;\n  }\n\n  function chkLen() {\n    var maxLen = parseInt(this.getAttribute('maxlength'), 10);\n    var charsLeft = void 0;\n    charsLeft = maxLen - this.value.length;\n    qs('#msgCount').innerHTML = charsLeft;\n    charsLeft <= 0 ? qs('#msgStatus').className = 'msgWarn' : qs('#msgStatus').className = '';\n    if (this.value.length >= maxLen) {\n      console.log('Maximum length exceeded: ' + maxLen, '\\nText has been shortened!');\n    }\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// ENCRYPTION AND DECRYPTION\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfunction writeIMG() {\n  qs('#resultImg').src = '';\n  qs('#status').innerHTML = 'Processing...';\n  function writefunc() {\n    var t = writeMsgToCanvas('canvas', qs('#message').value, qs('#password').value);\n    if (t != null) {\n      var myCanvas = qs('#canvas');\n      var image = myCanvas.toDataURL('image/png');\n      qs('#resultImg').src = image;\n      qs('#status').innerHTML = 'Successfully encrypted note in image.';\n      qs('#result').innerHTML = 'To read your note, select this file in step 1, enter your password, and press \"Decrypt\".';\n      qs('#output').style.display = 'block';\n      qs('#download').href = qs('#resultImg').src;\n      qs('#download').download = 'download.png';\n    }\n  }\n  loadIMGtoCanvas('cover-file', 'canvas', writefunc, 500);\n}\n\nfunction readIMG() {\n  qs('#output').style.display = 'none';\n  qs('#result').value = '';\n  qs('#status').innerHTML = 'Processing...';\n  function readfunc() {\n    var t = readMsgFromCanvas('canvas', qs('#password').value);\n    if (t != null) {\n      t = t.split('&').join('&amp;').split(' ').join('&nbsp;').split('<').join('&lt;').split('>').join('&gt;').replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n      qs('#status').innerHTML = 'Successfully decrypted note from image:';\n      qs('#output').style.display = 'block';\n      qs('#result').innerHTML = t;\n    } else {\n      qs('#status').innerHTML = 'Error decypting message.';\n    }\n  }\n  loadIMGtoCanvas('cover-file', 'canvas', readfunc);\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar CryptoJS = CryptoJS || function (a, m) {\n  var r = {},\n      f = r.lib = {},\n      g = function g() {},\n      l = f.Base = {\n    extend: function extend(a) {\n      g.prototype = this;\n      var b = new g();\n      a && b.mixIn(a);\n      b.hasOwnProperty('init') || (b.init = function () {\n        b.$super.init.apply(this, arguments);\n      });\n      b.init.prototype = b;\n      b.$super = this;\n      return b;\n    },\n    create: function create() {\n      var a = this.extend();\n      a.init.apply(a, arguments);\n      return a;\n    },\n    init: function init() {},\n    mixIn: function mixIn(a) {\n      for (var b in a) {\n        a.hasOwnProperty(b) && (this[b] = a[b]);\n      }\n      a.hasOwnProperty('toString') && (this.toString = a.toString);\n    },\n    clone: function clone() {\n      return this.init.prototype.extend(this);\n    }\n  },\n      p = f.WordArray = l.extend({\n    init: function init(a, b) {\n      a = this.words = a || [];\n      this.sigBytes = b != m ? b : 4 * a.length;\n    },\n    toString: function toString(a) {\n      return (a || q).stringify(this);\n    },\n    concat: function concat(a) {\n      var b = this.words,\n          d = a.words,\n          c = this.sigBytes;\n      a = a.sigBytes;\n      this.clamp();\n      if (c % 4) {\n        for (var j = 0; j < a; j++) {\n          b[c + j >>> 2] |= (d[j >>> 2] >>> 24 - 8 * (j % 4) & 255) << 24 - 8 * ((c + j) % 4);\n        }\n      } else if (d.length > 65535) {\n        for (j = 0; j < a; j += 4) {\n          b[c + j >>> 2] = d[j >>> 2];\n        }\n      } else {\n        b.push.apply(b, d);\n      }\n      this.sigBytes += a;\n      return this;\n    },\n    clamp: function clamp() {\n      var n = this.words,\n          b = this.sigBytes;\n      n[b >>> 2] &= 4294967295 << 32 - 8 * (b % 4);\n      n.length = a.ceil(b / 4);\n    },\n    clone: function clone() {\n      var a = l.clone.call(this);\n      a.words = this.words.slice(0);\n      return a;\n    },\n    random: function random(n) {\n      for (var b = [], d = 0; d < n; d += 4) {\n        b.push(4294967296 * a.random() | 0);\n      }\n      return new p.init(b, n);\n    }\n  }),\n      y = r.enc = {},\n      q = y.Hex = {\n    stringify: function stringify(a) {\n      var b = a.words;\n      a = a.sigBytes;\n      for (var d = [], c = 0; c < a; c++) {\n        var j = b[c >>> 2] >>> 24 - 8 * (c % 4) & 255;\n        d.push((j >>> 4).toString(16));\n        d.push((j & 15).toString(16));\n      }\n      return d.join('');\n    },\n    parse: function parse(a) {\n      for (var b = a.length, d = [], c = 0; c < b; c += 2) {\n        d[c >>> 3] |= parseInt(a.substr(c, 2), 16) << 24 - 4 * (c % 8);\n      }\n      return new p.init(d, b / 2);\n    }\n  },\n      G = y.Latin1 = {\n    stringify: function stringify(a) {\n      var b = a.words;\n      a = a.sigBytes;\n      for (var d = [], c = 0; c < a; c++) {\n        d.push(String.fromCharCode(b[c >>> 2] >>> 24 - 8 * (c % 4) & 255));\n      }\n      return d.join('');\n    },\n    parse: function parse(a) {\n      for (var b = a.length, d = [], c = 0; c < b; c++) {\n        d[c >>> 2] |= (a.charCodeAt(c) & 255) << 24 - 8 * (c % 4);\n      }\n      return new p.init(d, b);\n    }\n  },\n      fa = y.Utf8 = {\n    stringify: function stringify(a) {\n      try {\n        return decodeURIComponent(escape(G.stringify(a)));\n      } catch (b) {\n        throw Error('Malformed UTF-8 data');\n      }\n    },\n    parse: function parse(a) {\n      return G.parse(unescape(encodeURIComponent(a)));\n    }\n  },\n      h = f.BufferedBlockAlgorithm = l.extend({\n    reset: function reset() {\n      this._data = new p.init();\n      this._nDataBytes = 0;\n    },\n    _append: function _append(a) {\n      typeof a === 'string' && (a = fa.parse(a));\n      this._data.concat(a);\n      this._nDataBytes += a.sigBytes;\n    },\n    _process: function _process(n) {\n      var b = this._data,\n          d = b.words,\n          c = b.sigBytes,\n          j = this.blockSize,\n          l = c / (4 * j),\n          l = n ? a.ceil(l) : a.max((l | 0) - this._minBufferSize, 0);\n      n = l * j;\n      c = a.min(4 * n, c);\n      if (n) {\n        for (var h = 0; h < n; h += j) {\n          this._doProcessBlock(d, h);\n        }\n        h = d.splice(0, n);\n        b.sigBytes -= c;\n      }\n      return new p.init(h, c);\n    },\n    clone: function clone() {\n      var a = l.clone.call(this);\n      a._data = this._data.clone();\n      return a;\n    },\n    _minBufferSize: 0\n  });\n  f.Hasher = h.extend({\n    cfg: l.extend(),\n    init: function init(a) {\n      this.cfg = this.cfg.extend(a);\n      this.reset();\n    },\n    reset: function reset() {\n      h.reset.call(this);\n      this._doReset();\n    },\n    update: function update(a) {\n      this._append(a);\n      this._process();\n      return this;\n    },\n    finalize: function finalize(a) {\n      a && this._append(a);\n      return this._doFinalize();\n    },\n    blockSize: 16,\n    _createHelper: function _createHelper(a) {\n      return function (b, d) {\n        return new a.init(d).finalize(b);\n      };\n    },\n    _createHmacHelper: function _createHmacHelper(a) {\n      return function (b, d) {\n        return new ga.HMAC.init(a, d).finalize(b);\n      };\n    }\n  });\n  var ga = r.algo = {};\n  return r;\n}(Math);(function (a) {\n  var m = CryptoJS,\n      r = m.lib,\n      f = r.Base,\n      g = r.WordArray,\n      m = m.x64 = {};\n  m.Word = f.extend({\n    init: function init(a, p) {\n      this.high = a;\n      this.low = p;\n    }\n  });\n  m.WordArray = f.extend({\n    init: function init(l, p) {\n      l = this.words = l || [];\n      this.sigBytes = p != a ? p : 8 * l.length;\n    },\n    toX32: function toX32() {\n      for (var a = this.words, p = a.length, f = [], q = 0; q < p; q++) {\n        var G = a[q];\n        f.push(G.high);\n        f.push(G.low);\n      }\n      return g.create(f, this.sigBytes);\n    },\n    clone: function clone() {\n      for (var a = f.clone.call(this), p = a.words = this.words.slice(0), g = p.length, q = 0; q < g; q++) {\n        p[q] = p[q].clone();\n      }\n      return a;\n    }\n  });\n})();(function () {\n  function a() {\n    return g.create.apply(g, arguments);\n  }\n  for (var m = CryptoJS, r = m.lib.Hasher, f = m.x64, g = f.Word, l = f.WordArray, f = m.algo, p = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], y = [], q = 0; q < 80; q++) {\n    y[q] = a();\n  }\n  f = f.SHA512 = r.extend({\n    _doReset: function _doReset() {\n      this._hash = new l.init([new g.init(1779033703, 4089235720), new g.init(3144134277, 2227873595), new g.init(1013904242, 4271175723), new g.init(2773480762, 1595750129), new g.init(1359893119, 2917565137), new g.init(2600822924, 725511199), new g.init(528734635, 4215389547), new g.init(1541459225, 327033209)]);\n    },\n    _doProcessBlock: function _doProcessBlock(a, f) {\n      for (var h = this._hash.words, g = h[0], n = h[1], b = h[2], d = h[3], c = h[4], j = h[5], l = h[6], h = h[7], q = g.high, m = g.low, r = n.high, N = n.low, Z = b.high, O = b.low, $ = d.high, P = d.low, aa = c.high, Q = c.low, ba = j.high, R = j.low, ca = l.high, S = l.low, da = h.high, T = h.low, v = q, s = m, H = r, E = N, I = Z, F = O, W = $, J = P, w = aa, t = Q, U = ba, K = R, V = ca, L = S, X = da, M = T, x = 0; x < 80; x++) {\n        var B = y[x];\n        if (x < 16) {\n          var u = B.high = a[f + 2 * x] | 0,\n              e = B.low = a[f + 2 * x + 1] | 0;\n        } else {\n          var u = y[x - 15],\n              e = u.high,\n              z = u.low,\n              u = (e >>> 1 | z << 31) ^ (e >>> 8 | z << 24) ^ e >>> 7,\n              z = (z >>> 1 | e << 31) ^ (z >>> 8 | e << 24) ^ (z >>> 7 | e << 25),\n              D = y[x - 2],\n              e = D.high,\n              k = D.low,\n              D = (e >>> 19 | k << 13) ^ (e << 3 | k >>> 29) ^ e >>> 6,\n              k = (k >>> 19 | e << 13) ^ (k << 3 | e >>> 29) ^ (k >>> 6 | e << 26),\n              e = y[x - 7],\n              Y = e.high,\n              C = y[x - 16],\n              A = C.high,\n              C = C.low,\n              e = z + e.low,\n              u = u + Y + (e >>> 0 < z >>> 0 ? 1 : 0),\n              e = e + k,\n              u = u + D + (e >>> 0 < k >>> 0 ? 1 : 0),\n              e = e + C,\n              u = u + A + (e >>> 0 < C >>> 0 ? 1 : 0);\n          B.high = u;\n          B.low = e;\n        }\n        var Y = w & U ^ ~w & V,\n            C = t & K ^ ~t & L,\n            B = v & H ^ v & I ^ H & I,\n            ha = s & E ^ s & F ^ E & F,\n            z = (v >>> 28 | s << 4) ^ (v << 30 | s >>> 2) ^ (v << 25 | s >>> 7),\n            D = (s >>> 28 | v << 4) ^ (s << 30 | v >>> 2) ^ (s << 25 | v >>> 7),\n            k = p[x],\n            ia = k.high,\n            ea = k.low,\n            k = M + ((t >>> 14 | w << 18) ^ (t >>> 18 | w << 14) ^ (t << 23 | w >>> 9)),\n            A = X + ((w >>> 14 | t << 18) ^ (w >>> 18 | t << 14) ^ (w << 23 | t >>> 9)) + (k >>> 0 < M >>> 0 ? 1 : 0),\n            k = k + C,\n            A = A + Y + (k >>> 0 < C >>> 0 ? 1 : 0),\n            k = k + ea,\n            A = A + ia + (k >>> 0 < ea >>> 0 ? 1 : 0),\n            k = k + e,\n            A = A + u + (k >>> 0 < e >>> 0 ? 1 : 0),\n            e = D + ha,\n            B = z + B + (e >>> 0 < D >>> 0 ? 1 : 0),\n            X = V,\n            M = L,\n            V = U,\n            L = K,\n            U = w,\n            K = t,\n            t = J + k | 0,\n            w = W + A + (t >>> 0 < J >>> 0 ? 1 : 0) | 0,\n            W = I,\n            J = F,\n            I = H,\n            F = E,\n            H = v,\n            E = s,\n            s = k + e | 0,\n            v = A + B + (s >>> 0 < k >>> 0 ? 1 : 0) | 0;\n      }\n      m = g.low = m + s;\n      g.high = q + v + (m >>> 0 < s >>> 0 ? 1 : 0);\n      N = n.low = N + E;\n      n.high = r + H + (N >>> 0 < E >>> 0 ? 1 : 0);\n      O = b.low = O + F;\n      b.high = Z + I + (O >>> 0 < F >>> 0 ? 1 : 0);\n      P = d.low = P + J;\n      d.high = $ + W + (P >>> 0 < J >>> 0 ? 1 : 0);\n      Q = c.low = Q + t;\n      c.high = aa + w + (Q >>> 0 < t >>> 0 ? 1 : 0);\n      R = j.low = R + K;\n      j.high = ba + U + (R >>> 0 < K >>> 0 ? 1 : 0);\n      S = l.low = S + L;\n      l.high = ca + V + (S >>> 0 < L >>> 0 ? 1 : 0);\n      T = h.low = T + M;\n      h.high = da + X + (T >>> 0 < M >>> 0 ? 1 : 0);\n    },\n    _doFinalize: function _doFinalize() {\n      var a = this._data,\n          f = a.words,\n          h = 8 * this._nDataBytes,\n          g = 8 * a.sigBytes;\n      f[g >>> 5] |= 128 << 24 - g % 32;\n      f[(g + 128 >>> 10 << 5) + 30] = Math.floor(h / 4294967296);\n      f[(g + 128 >>> 10 << 5) + 31] = h;\n      a.sigBytes = 4 * f.length;\n      this._process();\n      return this._hash.toX32();\n    },\n    clone: function clone() {\n      var a = r.clone.call(this);\n      a._hash = this._hash.clone();\n      return a;\n    },\n    blockSize: 32\n  });\n  m.SHA512 = r._createHelper(f);\n  m.HmacSHA512 = r._createHmacHelper(f);\n})();\nfunction utf8Decode(bytes) {\n  var chars = [],\n      offset = 0,\n      length = bytes.length,\n      c = void 0,\n      c2 = void 0,\n      c3 = void 0;\n  while (offset < length) {\n    c = bytes[offset];\n    c2 = bytes[offset + 1];\n    c3 = bytes[offset + 2];\n    if (c < 128) {\n      chars.push(String.fromCharCode(c));\n      offset += 1;\n    } else if (c > 191 && c < 224) {\n      chars.push(String.fromCharCode((c & 31) << 6 | c2 & 63));\n      offset += 2;\n    } else {\n      chars.push(String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63));\n      offset += 3;\n    }\n  }\n  return chars.join('');\n}\nfunction utf8Encode(str) {\n  var bytes = [],\n      offset = 0,\n      length = void 0,\n      char = void 0;\n  str = encodeURI(str);\n  length = str.length;\n  while (offset < length) {\n    char = str[offset];\n    offset += 1;\n    if (char !== '%') {\n      bytes.push(char.charCodeAt(0));\n    } else {\n      char = str[offset] + str[offset + 1];\n      bytes.push(parseInt(char, 16));\n      offset += 2;\n    }\n  }\n  return bytes;\n}\nfunction utf8Decode(bytes) {\n  var chars = [],\n      offset = 0,\n      length = bytes.length,\n      c = void 0,\n      c2 = void 0,\n      c3 = void 0;\n  while (offset < length) {\n    c = bytes[offset];\n    c2 = bytes[offset + 1];\n    c3 = bytes[offset + 2];\n    if (c < 128) {\n      chars.push(String.fromCharCode(c));\n      offset += 1;\n    } else if (c > 191 && c < 224) {\n      chars.push(String.fromCharCode((c & 31) << 6 | c2 & 63));\n      offset += 2;\n    } else {\n      chars.push(String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63));\n      offset += 3;\n    }\n  }\n  return chars.join('');\n}\nfunction utf8Encode(str) {\n  var bytes = [],\n      offset = 0,\n      length = void 0,\n      char = void 0;\n  str = encodeURI(str);\n  length = str.length;\n  while (offset < length) {\n    char = str[offset];\n    offset += 1;\n    if (char !== '%') {\n      bytes.push(char.charCodeAt(0));\n    } else {\n      char = str[offset] + str[offset + 1];\n      bytes.push(parseInt(char, 16));\n      offset += 2;\n    }\n  }\n  return bytes;\n}\nfunction isInclude(arr, obj) {\n  return arr.indexOf(obj) != -1;\n}\nfunction rgbtoycbcr(r, g, b) {\n  result = Array();\n  result.push(0.299 * r + 0.587 * g + 0.114 * b);\n  result.push(128 - 0.168736 * r - 0.331264 * g + 0.5 * b);\n  result.push(128 + 0.5 * r - 0.418688 * g - 0.081312 * b);\n  return result;\n}\nfunction ycbcrtorgb(y, cb, cr) {\n  result = Array();\n  result.push(y + 1.402 * (cr - 128));\n  result.push(y - 0.344136 * (cb - 128) - 0.714136 * (cr - 128));\n  result.push(y + 1.772 * (cb - 128));\n  return result;\n}\nfunction gethashval(str, modval, taken) {\n  var result = 0;\n  var a = 0;\n  for (var i = 1; i < 20; i++) {\n    a += str.charCodeAt(i);\n  }\n  result += a * 419430000;\n  a = 0;\n  for (var i = 30; i < 50; i++) {\n    a += str.charCodeAt(i);\n  }\n  result += a * 4194000;\n  a = 0;\n  for (var i = 70; i < 90; i++) {\n    a += str.charCodeAt(i);\n  }\n  result += a * 41940;\n  a = 0;\n  for (var i = 100; i < 110; i++) {\n    a += str.charCodeAt(i);\n  }\n  result += a * 419;\n  for (var i = 20; i < 29; i++) {\n    result += str.charCodeAt(i);\n  }\n  for (var i = 90; i < 99; i++) {\n    result += str.charCodeAt(i);\n  }\n  result %= modval;\n  while (isInclude(taken, result)) {\n    result = (result + 1) % modval;\n  }\n  taken.push(result);\n  return result;\n}\nfunction imagedct(dataArray, isIdct) {\n  isIdct = isIdct === undefined ? !1 : isIdct;\n  function dct(dataArray) {\n    result = Array();\n    for (var i = 0; i < 64; i++) {\n      result.push(Array());\n    }\n    for (var chann = 0; chann < 3; chann++) {\n      for (var u = 0; u < 8; u++) {\n        for (var v = 0; v < 8; v++) {\n          var cu = u == 0 ? 1 / Math.sqrt(2) : 1;\n          var cv = v == 0 ? 1 / Math.sqrt(2) : 1;\n          var sum = 0;\n          for (var x = 0; x < 8; x++) {\n            for (var y = 0; y < 8; y++) {\n              sum += dataArray[x * 8 + y][chann] * Math.cos((2 * x + 1) * u * Math.PI / 16) * Math.cos((2 * y + 1) * v * Math.PI / 16);\n            }\n          }\n          result[u * 8 + v].push(1 / 4 * cu * cv * sum);\n        }\n      }\n    }\n    return result;\n  }\n  function idct(dataArray) {\n    result = Array();\n    for (var i = 0; i < 64; i++) {\n      result.push(Array());\n    }\n    for (var chann = 0; chann < 3; chann++) {\n      for (var x = 0; x < 8; x++) {\n        for (var y = 0; y < 8; y++) {\n          var sum = 0;\n          for (var u = 0; u < 8; u++) {\n            for (var v = 0; v < 8; v++) {\n              var cu = u == 0 ? 1 / Math.sqrt(2) : 1;\n              var cv = v == 0 ? 1 / Math.sqrt(2) : 1;\n              sum += cu * cv * dataArray[u * 8 + v][chann] * Math.cos((2 * x + 1) * u * Math.PI / 16) * Math.cos((2 * y + 1) * v * Math.PI / 16);\n            }\n          }\n          result[x * 8 + y].push(1 / 4 * sum);\n        }\n      }\n    }\n    return result;\n  }\n  return isIdct ? idct(dataArray) : dct(dataArray);\n}\nfunction dctconvert(imgData, width, height) {\n  var blocksize = 8;\n  var w_ite = Math.floor(width / blocksize);\n  var h_ite = Math.floor(height / blocksize);\n  var result = Array();\n  for (var h = 0; h < h_ite; h++) {\n    for (var w = 0; w < w_ite; w++) {\n      var _tmp = Array();\n      for (var i = 0; i < blocksize; i++) {\n        for (var j = 0; j < blocksize; j++) {\n          _tmp.push(rgbtoycbcr(imgData[((h * blocksize + i) * width + w * blocksize + j) * 4], imgData[((h * blocksize + i) * width + w * blocksize + j) * 4 + 1], imgData[((h * blocksize + i) * width + w * blocksize + j) * 4 + 2]));\n        }\n      }\n      result.push(imagedct(_tmp));\n    }\n  }\n  return result;\n}\nfunction cbit(a, lim) {\n  return Math.round(a / lim) % 2 == 1 ? !0 : !1;\n}\nfunction extractBitArray(imgData) {\n  var result = Array();\n  for (var i = 0; i < imgData.data.length; i += 4) {\n    result.push(imgData.data[i] % 2 == 1 ? !0 : !1);\n    result.push(imgData.data[i + 1] % 2 == 1 ? !0 : !1);\n    result.push(imgData.data[i + 2] % 2 == 1 ? !0 : !1);\n  }\n  return result;\n}\nfunction extractMsgArray_pass(bitarray, pass, copy) {\n  function comb(a) {\n    var len = a.length;\n    var count = 0;\n    for (var i = 0; i < len; i++) {\n      if (a[i]) {\n        count++;\n      }\n    }\n    if (count >= len / 2) {\n      return !0;\n    }\n    return !1;\n  }\n  var imgdatalength = bitarray.length;\n  pass = String(CryptoJS.SHA512(pass));\n  taken = Array();\n  var modval = imgdatalength;\n  var msgarray = Array();\n  var data = void 0;\n  var msgarraylen = Math.floor(Math.floor(imgdatalength / copy) / 8);\n  for (var i = 0; i < msgarraylen; i++) {\n    data = 0;\n    tmp = 128;\n    for (var j = 0; j < 8; j++) {\n      var tmpArray = Array();\n      for (var k = 0; k < copy; k++) {\n        tmpArray.push(bitarray[gethashval(pass, modval, taken)]);\n        pass = String(CryptoJS.SHA512(pass));\n      }\n      data += (comb(tmpArray) ? 1 : 0) * tmp;\n      tmp = Math.floor(tmp / 2);\n    }\n    if (data == 255) {\n      break;\n    }\n    msgarray.push(data);\n  }\n  return msgarray;\n}\nfunction extractBitArraydct(dctdata, lim) {\n  var result = Array();\n  var dctdatalength = dctdata.length;\n  for (var i = 0; i < dctdatalength; i++) {\n    result.push(cbit(dctdata[i][0][0], lim));\n    result.push(cbit(dctdata[i][0][1], lim));\n    result.push(cbit(dctdata[i][0][2], lim));\n  }\n  return result;\n}\nfunction readMsgFromCanvas_single(canvasid, pass, dct, copy, lim) {\n  dct = dct === undefined ? !1 : dct;\n  pass = pass === undefined ? '' : pass;\n  copy = copy === undefined ? 5 : copy;\n  lim = lim === undefined ? 30 : lim;\n  var c = document.getElementById(canvasid);\n  var ctx = c.getContext('2d');\n  var imgData = ctx.getImageData(0, 0, c.width, c.height);\n  var dctdata = dct ? dctconvert(imgData.data, c.width, c.height) : null;\n  var bitarray = dct ? extractBitArraydct(dctdata, lim) : extractBitArray(imgData);\n  var msgArray = dct ? extractMsgArray_pass(bitarray, pass, copy) : extractMsgArray_pass(bitarray, pass, 1);\n  if (msgArray == null) {\n    return null;\n  }\n  return utf8Decode(msgArray);\n}\nfunction bitconvert(str) {\n  var utf8array = utf8Encode(str);\n  var result = Array();\n  var utf8strlen = utf8array.length;\n  for (var i = 0; i < utf8strlen; i++) {\n    for (var j = 128; j > 0; j = Math.floor(j / 2)) {\n      if (Math.floor(utf8array[i] / j)) {\n        result.push(!0);\n        utf8array[i] -= j;\n      } else {\n        result.push(!1);\n      }\n    }\n  }\n  return result;\n}\nfunction unsetbit(k) {\n  return k % 2 == 1 ? k - 1 : k;\n}\nfunction setbit(k) {\n  return k % 2 == 1 ? k : k + 1;\n}\nfunction dct_setbit(k, lim) {\n  var tmp = Math.floor(k / lim);\n  return tmp % 2 == 1 ? tmp * lim : (tmp + 1) * lim;\n}\nfunction dct_unsetbit(k, lim) {\n  var tmp = Math.floor(k / lim);\n  return tmp % 2 == 1 ? (tmp - 1) * lim : tmp * lim;\n}\nfunction setimgdata(imgData, setdata) {\n  var j = 0;\n  for (var i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = setdata[j] ? setbit(imgData.data[i]) : unsetbit(imgData.data[i]);\n    imgData.data[i + 1] = setdata[j + 1] ? setbit(imgData.data[i + 1]) : unsetbit(imgData.data[i + 1]);\n    imgData.data[i + 2] = setdata[j + 2] ? setbit(imgData.data[i + 2]) : unsetbit(imgData.data[i + 2]);\n    imgData.data[i + 3] = 255;\n    j += 3;\n  }\n}\nfunction initialize(length) {\n  result = Array();\n  for (var i = 0; i < length; i++) {\n    result.push(Math.floor(Math.random() * 2) ? !0 : !1);\n  }\n  return result;\n}\nfunction generate_pass(imgdatalength, information, pass, copy) {\n  var info = bitconvert(information);\n  if ((info.length + 24) * copy > imgdatalength) {\n    alert('Text is too long, please try shortening it, or choosing a larger image.');\n    return null;\n  }\n  var result = initialize(imgdatalength);\n  var infolen = info.length;\n  pass = String(CryptoJS.SHA512(pass));\n  var taken = Array();\n  var modval = imgdatalength;\n  for (var i = 0; i < infolen; i++) {\n    for (var j = 0; j < copy; j++) {\n      result[gethashval(pass, modval, taken)] = info[i];\n      pass = String(CryptoJS.SHA512(pass));\n    }\n  }\n  for (var j = 0; j < 24; j++) {\n    for (var i = 0; i < copy; i++) {\n      result[gethashval(pass, modval, taken)] = !0;\n      pass = String(CryptoJS.SHA512(pass));\n    }\n  }\n  return result;\n}\nfunction dctset(imgData, dctdata, width, height, setarray, lim) {\n  function norm(a) {\n    a = Math.round(a);\n    a = a > 255 ? 255 : a;\n    return a < 0 ? 0 : a;\n  }\n  var dctdatalength = dctdata.length;\n  var datalength = setarray.length / 3;\n  for (var i = 0; i < datalength; i++) {\n    dctdata[i][0][0] = setarray[i * 3] ? dct_setbit(dctdata[i][0][0], lim) : dct_unsetbit(dctdata[i][0][0], lim);\n    dctdata[i][0][1] = setarray[i * 3 + 1] ? dct_setbit(dctdata[i][0][1], lim) : dct_unsetbit(dctdata[i][0][1], lim);\n    dctdata[i][0][2] = setarray[i * 3 + 2] ? dct_setbit(dctdata[i][0][2], lim) : dct_unsetbit(dctdata[i][0][2], lim);\n  }\n  var blocksize = 8;\n  var w_ite = Math.floor(width / blocksize);\n  var h_ite = Math.floor(height / blocksize);\n  var result = Array();\n  var count = 0;\n  for (var h = 0; h < h_ite; h++) {\n    for (var w = 0; w < w_ite; w++) {\n      var _tmp2 = imagedct(dctdata[count], !0);\n      for (var i = 0; i < blocksize; i++) {\n        for (var j = 0; j < blocksize; j++) {\n          var rgb = ycbcrtorgb(_tmp2[i * blocksize + j][0], _tmp2[i * blocksize + j][1], _tmp2[i * blocksize + j][2]);\n          for (var chann = 0; chann < 3; chann++) {\n            imgData[((h * blocksize + i) * width + w * blocksize + j) * 4 + chann] = norm(rgb[chann]);\n          }\n        }\n      }\n      count++;\n    }\n  }\n  for (var i = 0; i < imgData.length; i += 4) {\n    imgData[i + 3] = 255;\n  }\n}\nfunction writeMsgToCanvas_single(canvasid, msg, pass, dct, copy, lim) {\n  dct = dct === undefined ? !1 : dct;\n  pass = pass === undefined ? '' : pass;\n  copy = copy === undefined ? 5 : copy;\n  lim = lim === undefined ? 30 : lim;\n  var c = document.getElementById(canvasid);\n  var ctx = c.getContext('2d');\n  var imgData = ctx.getImageData(0, 0, c.width, c.height);\n  var dctdata = dct ? dctconvert(imgData.data, c.width, c.height) : null;\n  var datalength = dct ? dctdata.length * 3 : Math.floor(imgData.data.length / 4) * 3;\n  var setarray = dct ? generate_pass(datalength, msg, pass, copy) : generate_pass(datalength, msg, pass, 1);\n  if (setarray == null) {\n    return null;\n  }\n  dct ? dctset(imgData.data, dctdata, c.width, c.height, setarray, lim) : setimgdata(imgData, setarray);\n  ctx.putImageData(imgData, 0, 0);\n  return 1;\n}\nfunction writeMsgToCanvas(canvasid, msg, pass, mode) {\n  mode = mode === undefined ? 0 : parseInt(mode);\n  switch (mode) {\n    case 1:\n      return writeMsgToCanvas_single(canvasid, msg, pass, !0, 11, 15);\n    case 2:\n      return writeMsgToCanvas_single(canvasid, msg, pass, !0, 9, 20);\n    case 3:\n      return writeMsgToCanvas_single(canvasid, msg, pass, !0, 5, 30);\n    case 4:\n      return writeMsgToCanvas_single(canvasid, msg, pass, !0, 5, 35);\n    case 5:\n      return writeMsgToCanvas_single(canvasid, msg, pass, !0, 5, 50);\n    case 0:\n    default:\n      return writeMsgToCanvas_single(canvasid, msg, pass);\n  }\n}\nfunction readMsgFromCanvas(canvasid, pass, mode) {\n  mode = mode === undefined ? 0 : parseInt(mode);\n  switch (mode) {\n    case 1:\n      return readMsgFromCanvas_single(canvasid, pass, !0, 11, 15);\n    case 2:\n      return readMsgFromCanvas_single(canvasid, pass, !0, 9, 20);\n    case 3:\n      return readMsgFromCanvas_single(canvasid, pass, !0, 5, 30);\n    case 4:\n      return readMsgFromCanvas_single(canvasid, pass, !0, 5, 35);\n    case 5:\n      return readMsgFromCanvas_single(canvasid, pass, !0, 5, 50);\n    case 0:\n    default:\n      return readMsgFromCanvas_single(canvasid, pass);\n  }\n}\nfunction loadIMGtoCanvas(inputid, canvasid, callback, maxsize) {\n  maxsize = maxsize === undefined ? 0 : maxsize;\n  var input = document.getElementById(inputid);\n  if (input.files && input.files[0]) {\n    var f = input.files[0];\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      var data = e.target.result;\n      var image = new Image();\n      image.onload = function () {\n        var w = image.width;\n        var h = image.height;\n        if (maxsize > 0) {\n          if (w > maxsize) {\n            h *= maxsize / w;\n            w = maxsize;\n          }\n          if (h > maxsize) {\n            w *= maxsize / h;\n            h = maxsize;\n          }\n          w = Math.floor(w);\n          h = Math.floor(h);\n        }\n        var canvas = document.createElement('canvas');\n        canvas.id = canvasid;\n        canvas.width = w;\n        canvas.height = h;\n        canvas.style.display = 'none';\n        var body = document.getElementsByTagName('body')[0];\n        body.appendChild(canvas);\n        var context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, image.width, image.height, 0, 0, w, h);\n        callback();\n        document.body.removeChild(canvas);\n      };\n      image.src = data;\n    };\n    reader.readAsDataURL(f);\n  } else {\n    alert('No image file selected.');\n    return 'Error processing image.';\n  }\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assets/js/components/steganography.js\n// module id = 58\n// module chunks = 3\n\n//# sourceURL=webpack:///./src/assets/js/components/steganography.js?")}});